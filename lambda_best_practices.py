# -*- coding: utf-8 -*-
"""Lambda Best Practices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jGSXSuJZlsaBDSS_njozoQNsfJO2nb-X

###What is a lambda?
1. A lambda is an anonymous function (i.e., without a name). It is syntactic sugar for small throwaway functions.
- Core Syntax
- lambda arguments: expression <br>
lambda x: x + 1
"""

check_even = lambda x: "Even" if x % 2 == 0 else "Odd"
print(check_even(10))

#“Positive”, “Negative” or “Zero”.
check_posnag = lambda x: "Positive" if x > 0 else ("Zero" if x==0 else "Negetive")
print(check_posnag(-1))

numbers = [1, 2, 3, 4]
squares = list(map(lambda x: x ** 2, numbers))
print(squares)

#Use map with lambda to capitalize a list of names and prefix them with "Hello ".
names = ["max","tax","jax","rex","bix"]
capNames = list(map(lambda x:"Hello "+str(x).capitalize(), names))
print(capNames)

#filter example
def check_float_or_string(item):
  return isinstance(item, float) or isinstance(item, str)

data = [1, 2.5, 'apple', 3, 'banana', 4.0, 5]
filtered_data = list(filter(check_float_or_string, data))
filtered_data

#print even from list
nums = [1, 5, 6, 2, 7]
even = list(filter(lambda x: x % 2 == 0, nums))
print(even)  # [6, 2]

# Use filter with lambda to extract strings of length greater than 5 from a list of words.
aircrafts = ["Supermarine Spitfire", "Messerschmitt Bf 109", "North American P-51 Mustang", "Focke-Wulf Fw 190", "Mitsubishi A6M Zero"]
filetAir = list(filter(lambda x: len(x) >= 20, aircrafts))
print(filetAir)

# We use reduce when we want to apply a function to the items of an iterable
# in a cumulative way, reducing the iterable to a single value.
# In this example, we want to find the sum of all numbers in the list.
from functools import reduce

def concatenate_strings(string1, string2):
  """
  A simple function to concatenate two strings.
  """
  return string1 + " " + string2

words = ["This", "is", "an", "example"]
sentence = reduce(concatenate_strings, words)
sentence

from functools import reduce
nums = [1, 2, 3, 4]#factorial
product = reduce(lambda x, y: x * y, nums)
print(product)  # 24

# Use reduce to find the longest word in a list of strings.
furniture_brands = ["IKEA", "Ashley Furniture", "Ethan Allen", "La-Z-Boy", "Herman Miller"]
longest_str = reduce(lambda x, y: (x if len(x)>len(y) else y), furniture_brands)
print(longest_str)

#Example of sorted
students = {"John": 80, "Alice": 90, "Bob": 70}
sorted_students = sorted(students.items())
print(sorted_students)  # Sorted by marks

students = [("John", 80), ("Alice", 90), ("Bob", 70)]
sorted_students = sorted(students, key=lambda x: x[1])
print(sorted_students)  # Sorted by marks

# Sort a list of dictionaries representing users by their "age" key using lambda.
artifacts = [{"Rosetta Stone": 1799}, {"Terracotta Army": 210}, {"Code of Hammurabi": 1754}, {"Venus de Milo": 130}, {"Dead Sea Scrolls": 200}]
sorted_dict = sorted(artifacts, key=lambda x: list(x.values())[0])
print(sorted_dict)

#nested Lambda
adder = lambda x: lambda y: x + y
add_5 = adder(5)
print(add_5(10))  # 15

#Write a lambda that returns a multiplier function — i.e., multiplier(3)(10) should return 30.
multipl = lambda x: lambda y:x*y
mul3 = multipl(3)
print(mul3(10))

# Inside annotate() or values_list()
# from django.db.models import F
# products.annotate(
#     discounted_price=F('price') * 0.9
# )

# product_list = list(products.values('name', 'price'))
# discount = lambda p: {**p, 'discounted_price': p['price'] * 0.9}
# new_list = list(map(discount, product_list))

import pandas as pd

df = pd.DataFrame({
    'score': [50, 70, 90, 30]
})
df['grade'] = df['score'].apply(lambda x: 'A' if x >= 80 else 'B' if x >= 60 else 'C')
print(df)

#Use lambda + apply to:
# Convert a column of full names into initials (e.g., "John Smith" → "J.S.")
writers = ["J.R.R. Tolkien", "George R.R. Martin", "Brandon Sanderson", "Robert Jordan", "Ursula K. Le Guin"]
df_writers = pd.DataFrame(writers, columns=["Fantasy Authors"])
df_writers["Name Initials"] = df_writers["Fantasy Authors"].apply(lambda x: x.split()[0][0] + " " + x.split()[1][0])#.split("." or " ")
df_writers

words = ["apple", "banana", "pear", "grapes"]
sorted_words = sorted(words, key=lambda x: (-len(x), x))
print(sorted_words)  # By descending length, then alphabet

#Sort a list of tuples like [(“a”, 2), (“b”, 3), (“c”, 2)] by number descending, then by letter ascending.

def apply_twice(f, x):
    return f(f(x))

print(apply_twice(lambda x: x + 2, 10))  # 14

#Create a lambda that formats a number by adding commas (e.g., 1000000 → '1,000,000')

# In sorted, groupby, map post-query transformations.